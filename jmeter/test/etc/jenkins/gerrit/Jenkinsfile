#!groovy

@Library('nya')
import se.uhr.nya.build.GerritLabel
import se.uhr.nya.build.Nodes

def branch = params.GERRIT_BRANCH
def commitId = params.GERRIT_PATCHSET_REVISION
def changeId = params.GERRIT_CHANGE_ID

assert branch && commitId && changeId

node (Nodes.DEFAULT) {

	timestamps {
		stage('setup') {
			checkout scm
			addBranchName(branch)
		}

		load 'repos/test/etc/jenkins/common.groovy'

		stage('compile') {
			withNyaGerritReview(GerritLabel.COMPILE_VERIFIED) {
				withNyaDockerRegistry {
					docker.image(BUILD_IMAGE).inside {
						ansiColor('xterm') {
							sh "mvn --file repos/test/pom.xml \
									--batch-mode \
									-Dmaven.repo.local=.repository \
									-Duser.home=/home/ \
									-DskipTests -T 1C \
									clean compile"
						}
					}
				}
			}
		}

		parallel (
			'sonar': {
				stage('sonar') {
					withNyaDockerRegistry {
						docker.image(BUILD_IMAGE).inside {
							withNyaSonarQubeEnv {
								ansiColor('xterm') {
									sh "mvn --file repos/test/pom.xml \
											--batch-mode \
                                            -Dmaven.repo.local=.repository \
											-Dsonar.analysis.mode=issues \
											-Dsonar.working.directory=sonar \
											${nya.sonarGerritProperties} \
											sonar:sonar"
								}
							}
						}
					}
				}
			},
			'unittest' : {
				stage('unittest') {
					withNyaGerritUnitTestReview {
						withNyaDockerRegistry {
							docker.image(BUILD_IMAGE).inside {
								ansiColor('xterm') {
									sh "mvn --file repos/test/pom.xml \
											--batch-mode \
											-Dmaven.repo.local=.repository \
											-T 1C test"
								}
							}
						}
					}
				}
			}
		)
	}
}
