#!groovy

@Library('nya')

import se.uhr.nya.build.Git
import se.uhr.nya.build.Message
import se.uhr.nya.build.Nodes
import static se.uhr.nya.build.Message.Recipient.CM
import static se.uhr.nya.build.Message.Recipient.DEVELOPERS


def branch = params.containsKey('GERRIT_BRANCH') ? params.get('GERRIT_BRANCH') : 'master'
def commitId = params.get('GERRIT_PATCHSET_REVISION')

assert branch

node (Nodes.DEFAULT) {

	stage('setup') {
		checkout scm
		addBranchName(branch)
	}

	def common = load 'repos/test/etc/jenkins/common.groovy'
	
	timestamps {
		try {
			withNyaDockerRegistry {
				stage('build') {
					docker.image(BUILD_IMAGE).inside {
						ansiColor('xterm') {
							sh "mvn --file repos/test/pom.xml \
									--batch-mode \
									-Dmaven.repo.local=.repository \
									-DskipTests \
									clean deploy"
						}
					}
				}
					
				parallel (
					'sonar': {
						stage('sonar') {
							docker.image(BUILD_IMAGE).inside {
								withNyaSonarQubeEnv {
									ansiColor('xterm') {
										sh "mvn --file repos/test/pom.xml \
												--batch-mode \
												-Dmaven.repo.local=.repository \
												-Dsonar.analysis.mode=publish \
												-Dsonar.branch=${branch} \
												-Dsonar.working.directory=sonar \
												sonar:sonar"
									}
								}
							}
						}
					},
					'OWASP': {
						stage('OWASP') {
							docker.image(BUILD_IMAGE).inside('-e LC_ALL') {
								ansiColor('xterm') {
									sh "mvn --file repos/test/pom.xml \
											--batch-mode \
											-Dmaven.repo.local=.repository \
											-Dformat=xml \
											-DsuppressionFile=repos/test/etc/owasp/owaspsuppressions.xml \
											-DassemblyAnalyzerEnabled=false \
											-DossindexAnalyzerEnabled=false \
											org.owasp:dependency-check-maven:aggregate"
									}
							}
							dependencyCheckPublisher unstableTotalLow: '0', unstableTotalMedium: '0', unstableTotalHigh: '0', unstableTotalCritical: '0', pattern: 'repos/test/target/dependency-check-report.xml'
						}
					},
					'dependencies': {
						stage('dependencies') {
							docker.image(BUILD_IMAGE).inside('-e LC_ALL') {
								ansiColor('xterm') {
									sh "mvn --file repos/test/pom.xml \
											-Dmaven.repo.local=.repository \
											-Dmaven.version.rules=${maven.dependencyUpdateRuleUrl()} \
											-Dversions.outputFile=target/dependency-updates.txt \
											versions:display-dependency-updates"
									}
							}
							maven.publishDependencyUpdates(file: 'repos/test/target/dependency-updates.txt')
						}
					}					
				)
			}
			
			addBuildVersion pom: 'repos/test/pom.xml'
		}
		catch (e) {
			common.postBuildFailedNotification()
			throw e
		}
	}
}
